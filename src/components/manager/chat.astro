---
import { getMessages } from '@/services/projects.services'

interface Props {
	table: string
	id: string
}

const { table, id } = Astro.props

const messages = await getMessages(table, id)

const getContent = (message: any) => {
	if (message.type === 'ai') {
		return JSON.parse(message.content).salida
			? JSON.parse(message.content).salida
			: JSON.parse(message.content).resumen
	}

	return message.content
}

const sendAsesor = messages.find(
	({ message }) =>
		message.content.includes('Genera un pequeño resumen') || message.content.includes('El usuario')
)
---

<div class="flex items-end border-b border-gray-700 bg-gray-800 p-4">
	<img class="mr-4 h-10 w-10 rounded-full" src="/logo-black.png" alt="Avatar" />
	<h2 class="text-lg font-semibold">{id}</h2>
	{sendAsesor && <p class="ml-2 text-sm text-gray-400">Pasado al asesor</p>}
</div>
<div class="flex-grow overflow-y-auto bg-gray-800 p-4">
	{
		messages
			.filter(
				({ message }) =>
					!message.content.includes('Genera un pequeño resumen') &&
					!message.content.includes('El usuario')
			)
			.sort((a, b) => a.id - b.id)
			.map(({ message }) => {
				const isUser = message.type === 'ai'

				if (isUser) {
					return (
						<div class="mb-4 flex justify-end">
							<div class="max-w-[60%] rounded-lg bg-blue-500 p-2 text-white">
								<p>{getContent(message)}</p>
							</div>
						</div>
					)
				}

				return (
					<div class="mb-4 flex justify-start">
						<div class="max-w-[60%] rounded-lg bg-gray-700 p-2">
							<p>{getContent(message)}</p>
						</div>
					</div>
				)
			})
	}
</div>
